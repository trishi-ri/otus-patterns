swagger: '2.0'
info:
  description: 'This is a sample server StarWars server.'
  version: '1.0.0'
  title: 'Swagger StarWars'
host: 'starwars.swagger.io'
basePath: '/v2'
tags:
  - name: 'game'
    description: 'Everything about your Games'
  - name: 'tournament'
    description: 'Everything about your Tournaments'
  - name: 'user'
    description: 'Operations about user'
schemes:
  - 'https'
  - 'http'
paths:
  /game:
    get:
      tags:
        - 'game'
      summary: 'Finds games by filter'
      operationId: 'findGamesByFilter'
      produces:
        - 'application/json'
      parameters:
        - name: 'gameStatus'
          in: 'query'
          description: 'game status'
          type: 'array'
          items:
            type: 'string'
            enum:
              - 'planned'
              - 'in progress'
              - 'completed'
          collectionFormat: 'multi'
        - name: 'participantsIds'
          in: 'query'
          description: 'game participants'
          type: 'array'
          items:
            type: 'integer'
            format: 'int64'
          collectionFormat: 'multi'
      responses:
        '200':
          description: 'successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Game'
        '400':
          description: 'Invalid status value'
      security:
        - starwars_auth:
            - 'read:games'
    post:
      tags:
        - 'game'
      summary: 'Add a new game'
      operationId: 'addGame'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Game object that needs to be added'
          required: true
          schema:
            $ref: '#/definitions/NewGame'
      responses:
        '405':
          description: 'Invalid input'
      security:
        - starwars_auth:
            - 'write:games'
            - 'read:games'
  /game/{gameId}:
    get:
      tags:
        - 'game'
      summary: 'Find game by ID'
      description: 'Returns a single game'
      operationId: 'getGameById'
      produces:
        - 'application/json'
      parameters:
        - name: 'gameId'
          in: 'path'
          description: 'ID of game to return'
          required: true
          type: 'integer'
          format: 'int64'
      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/Game'
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Game not found'
      security:
        - api_key: []
    put:
      tags:
        - 'game'
      summary: 'Updates a game with form data'
      operationId: 'updateGameWithForm'
      consumes:
        - 'application/x-www-form-urlencoded'
      produces:
        - 'application/json'
      parameters:
        - name: 'gameId'
          in: 'path'
          description: 'ID of game that needs to be updated'
          required: true
          type: 'integer'
          format: 'int64'
        - name: 'startDate'
          in: 'formData'
          description: 'Updated start date of the game'
          required: false
          type: 'string'
          format: 'date-time'
        - name: 'paricipantsIds'
          in: 'formData'
          description: 'Updated participants of the pet'
          required: false
          type: 'array'
          items:
            format: 'number'
      responses:
        '405':
          description: 'Invalid input'
      security:
        - starwars_auth:
            - 'write:games'
            - 'read:games'
    delete:
      tags:
        - 'game'
      summary: 'Deletes a game'
      operationId: 'deleteGame'
      produces:
        - 'application/json'
      parameters:
        - name: 'gameId'
          in: 'path'
          description: 'Game id to delete'
          required: true
          type: 'integer'
          format: 'int64'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Game not found'
      security:
        - starwars_auth:
            - 'write:games'
            - 'read:games'

  /tournament:
    get:
      tags:
        - 'tournament'
      summary: 'Finds tournaments by filter'
      operationId: 'findTournamentsByFilter'
      produces:
        - 'application/json'
      parameters:
        - name: 'tournamentStatus'
          in: 'query'
          description: 'tournaments status'
          type: 'array'
          items:
            type: 'string'
            enum:
              - 'planned'
              - 'in progress'
              - 'completed'
          collectionFormat: 'multi'
      responses:
        '200':
          description: 'successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Tournament'
        '400':
          description: 'Invalid status value'
      security:
        - starwars_auth:
            - 'read:games'
    post:
      tags:
        - 'tournament'
      summary: 'Add a new tournament'
      operationId: 'addTournament'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Tournament object that needs to be added'
          required: true
          schema:
            $ref: '#/definitions/NewTournament'
      responses:
        '405':
          description: 'Invalid input'
      security:
        - starwars_auth:
            - 'write:games'
            - 'read:games'
  /tournament/{tournamentId}:
    get:
      tags:
        - 'tournament'
      summary: 'Find tournament by ID'
      description: 'Returns a single tournament'
      operationId: 'getTournamentById'
      produces:
        - 'application/json'
      parameters:
        - name: 'tournamentId'
          in: 'path'
          description: 'ID of tournament to return'
          required: true
          type: 'integer'
          format: 'int64'
      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/Tournament'
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Tournament not found'
      security:
        - api_key: []
    put:
      tags:
        - 'tournament'
      summary: 'Updates a tournament with form data'
      operationId: 'updateTournamentWithForm'
      consumes:
        - 'application/x-www-form-urlencoded'
      produces:
        - 'application/json'
      parameters:
        - name: 'tournamentId'
          in: 'path'
          description: 'ID of tournament that needs to be updated'
          required: true
          type: 'integer'
          format: 'int64'
        - name: 'startDate'
          in: 'formData'
          description: 'Updated start date of the tournament'
          required: false
          type: 'string'
          format: 'date-time'
        - name: 'paricipantsIds'
          in: 'formData'
          description: 'Updated participants of the tournament'
          required: false
          type: 'array'
          items:
            format: 'number'
        - name: 'regular'
          in: 'formData'
          description: 'Updated regular of the tournament'
          required: false
          type: 'boolean'
      responses:
        '405':
          description: 'Invalid input'
      security:
        - starwars_auth:
            - 'write:games'
            - 'read:games'
    delete:
      tags:
        - 'tournament'
      summary: 'Deletes a tournament'
      operationId: 'deleteTournament'
      produces:
        - 'application/json'
      parameters:
        - name: 'tournamentId'
          in: 'path'
          description: 'Tournament id to delete'
          required: true
          type: 'integer'
          format: 'int64'
      responses:
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Tournament not found'
      security:
        - starwars_auth:
            - 'write:games'
            - 'read:games'

  /user:
    post:
      tags:
        - 'user'
      summary: 'Create user'
      description: 'This can only be done by the logged in user.'
      operationId: 'createUser'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Created user object'
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: 'successful operation'
  /user/createWithArray:
    post:
      tags:
        - 'user'
      summary: 'Creates list of users with given input array'
      description: ''
      operationId: 'createUsersWithArrayInput'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'List of user object'
          required: true
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: 'successful operation'
  /user/createWithList:
    post:
      tags:
        - 'user'
      summary: 'Creates list of users with given input array'
      description: ''
      operationId: 'createUsersWithListInput'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'List of user object'
          required: true
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: 'successful operation'
  /user/login:
    get:
      tags:
        - 'user'
      summary: 'Logs user into the system'
      description: ''
      operationId: 'loginUser'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - name: 'username'
          in: 'query'
          description: 'The user name for login'
          required: true
          type: 'string'
        - name: 'password'
          in: 'query'
          description: 'The password for login in clear text'
          required: true
          type: 'string'
      responses:
        '200':
          description: 'successful operation'
          schema:
            type: 'string'
          headers:
            X-Rate-Limit:
              type: 'integer'
              format: 'int32'
              description: 'calls per hour allowed by the user'
            X-Expires-After:
              type: 'string'
              format: 'date-time'
              description: 'date in UTC when token expires'
        '400':
          description: 'Invalid username/password supplied'
  /user/logout:
    get:
      tags:
        - 'user'
      summary: 'Logs out current logged in user session'
      description: ''
      operationId: 'logoutUser'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters: []
      responses:
        default:
          description: 'successful operation'
  /user/{username}:
    get:
      tags:
        - 'user'
      summary: 'Get user by user name'
      description: ''
      operationId: 'getUserByName'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - name: 'username'
          in: 'path'
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: 'string'
      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/User'
        '400':
          description: 'Invalid username supplied'
        '404':
          description: 'User not found'
    put:
      tags:
        - 'user'
      summary: 'Updated user'
      description: 'This can only be done by the logged in user.'
      operationId: 'updateUser'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - name: 'username'
          in: 'path'
          description: 'name that need to be updated'
          required: true
          type: 'string'
        - in: 'body'
          name: 'body'
          description: 'Updated user object'
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: 'Invalid user supplied'
        '404':
          description: 'User not found'
    delete:
      tags:
        - 'user'
      summary: 'Delete user'
      description: 'This can only be done by the logged in user.'
      operationId: 'deleteUser'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - name: 'username'
          in: 'path'
          description: 'The name that needs to be deleted'
          required: true
          type: 'string'
      responses:
        '400':
          description: 'Invalid username supplied'
        '404':
          description: 'User not found'
securityDefinitions:
  starwars_auth:
    type: 'oauth2'
    authorizationUrl: 'http://starwars.swagger.io/oauth/dialog'
    flow: 'implicit'
    scopes:
      write:games: 'modify games in your account'
      read:games: 'read your games'
  api_key:
    type: 'apiKey'
    name: 'api_key'
    in: 'header'
definitions:
  User:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      username:
        type: 'string'
      email:
        type: 'string'
      password:
        type: 'string'
      rating:
        type: 'integer'
        format: 'int64'
    xml:
      name: 'User'
  Game:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      startDate:
        type: 'string'
        format: 'date-time'
      status:
        type: 'string'
        description: 'Game Status'
        enum:
          - 'planned'
          - 'in progress'
          - 'completed'
      participants:
        type: 'array'
        items:
          $ref: '#/definitions/Participant'
      winnerId:
        type: 'integer'
        format: 'int64'
  NewGame:
    type: 'object'
    required:
      - 'startDate'
      - 'participantsIds'
    properties:
      startDate:
        type: 'string'
        format: 'date-time'
      participantsIds:
        type: 'array'
        items:
          type: 'integer'
          format: 'int64'
  Tournament:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      startDate:
        type: 'string'
        format: 'date-time'
      status:
        type: 'string'
        description: 'Tournament Status'
        enum:
          - 'planned'
          - 'in progress'
          - 'completed'
      participants:
        type: 'array'
        items:
          $ref: '#/definitions/Participant'
      games:
        type: 'array'
        items:
          $ref: '#/definitions/Game'
      winnerId:
        type: 'integer'
        format: 'int64'
      rating:
        type: 'integer'
        format: 'int64'
      regular:
        type: 'boolean'
  NewTournament:
    type: 'object'
    required:
      - 'startDate'
      - 'participantsIds'
    properties:
      startDate:
        type: 'string'
        format: 'date-time'
      participantsIds:
        type: 'array'
        items:
          type: 'integer'
          format: 'int64'
      regular:
        type: 'boolean'
  Participant:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      username:
        type: 'string'
        example: 'Anna'
    xml:
      name: 'Participant'
